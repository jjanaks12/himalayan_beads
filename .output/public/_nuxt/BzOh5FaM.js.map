{"version":3,"mappings":"mHAAO,MAAMA,EAAwB,IAAI,ICClC,eAAeC,EAAWC,EAAO,CACtC,GAAI,CAACA,EACH,MAAO,GAET,GAAIF,EAAM,IAAIE,CAAK,EACjB,OAAOF,EAAM,IAAIE,CAAK,EAExB,KAAM,CAAE,CAACA,CAAK,EAAGC,CAAI,EAAK,MAAMC,EAAA,iBAAAF,CAAA,EAAAC,CAAA,eAAO,eAAS,UAAAD,CAAA,EAAAC,CAAA,uBAChD,OAAAH,EAAM,IAAIE,EAAOC,CAAI,EACdA,CACT,kPCmBM,MAAAE,EAAyBC,IAAmB,OAAO,IAEnDC,EAAQC,EAORC,EAAQC,EAAS,IACjBH,EAAM,KAAaA,EAAM,KACzBF,EAAQ,YAAoBA,EAAQ,YACjC,KACR,EAEKM,EAAoBC,EAAI,EAAE,EAG1BC,EAA8CH,EAAS,KAAO,CAClE,WAAYH,EAAM,MAAQ,KAAO,IACjC,WAAYA,EAAM,MAAQ,KAAO,GACjC,IAGF,eAAeO,GAAa,CAC1BH,EAAK,MAAQ,MAAMV,EAAWM,EAAM,IAAI,CAC1C,CAGA,OAAAQ,EAAM,SAAYR,EAAM,MAAY,CAAAS,EAAAC,CAAA,EAAAC,EAAA,IAAAJ,CAAS,oBAGvC,CAAAE,EAAAC,CAAA,EAAAC,EAAA,IAAAJ,EAAA,CAAW","names":["cache","importIcon","value","icon","__vitePreload","options","useRuntimeConfig","props","__props","_size","computed","path","ref","styles","updateIcon","watch","__temp","__restore","_withAsyncContext"],"ignoreList":[0,1,2],"sources":["../../../../node_modules/nuxt-mdi/dist/runtime/library/cache.mjs","../../../../node_modules/nuxt-mdi/dist/runtime/library/loader.mjs","../../../../node_modules/nuxt-mdi/dist/runtime/components/MdiIcon.vue"],"sourcesContent":["export const cache = /* @__PURE__ */ new Map();\n","import { cache } from \"./cache.mjs\";\nexport async function importIcon(value) {\n  if (!value) {\n    return \"\";\n  }\n  if (cache.has(value)) {\n    return cache.get(value);\n  }\n  const { [value]: icon } = await import(\"@mdi/js\");\n  cache.set(value, icon);\n  return icon;\n}\n","<template>\n  <svg\n    viewBox=\"0 0 24 24\"\n    :style=\"styles\"\n    :width=\"_size\"\n    :height=\"_size\"\n    :preserveAspectRatio=\"preserveAspectRatio\"\n  >\n    <path :d=\"path\" />\n  </svg>\n</template>\n\n<script setup lang=\"ts\">\nimport { importIcon } from '../library/loader'\nimport type { Ref, ComputedRef } from 'vue'\nimport { computed, ref, watch } from 'vue'\nimport type { MdiIconString } from './MdiIcon'\nimport { ModuleOptions } from '../../module'\nimport { useRuntimeConfig } from 'nuxt/app'\n\ntype PluginOptions = ModuleOptions\n\nexport interface MdiIconProps {\n  size?: string,\n  flipX?: boolean,\n  flipY?: boolean,\n  icon: MdiIconString,\n  preserveAspectRatio?: string,\n}\n\nconst options: PluginOptions = useRuntimeConfig().public.mdi as PluginOptions\n\nconst props = withDefaults(defineProps<MdiIconProps>(), {\n  size: undefined,\n  flipX: false,\n  flipY: false,\n  preserveAspectRatio: 'meet',\n})\n\nconst _size = computed(() => {\n  if (props.size) return props.size\n  if (options.defaultSize) return options.defaultSize\n  return '1em'\n})\n\nconst path: Ref<string> = ref('')\n\n// Dynamically set css variables for flipping the icon.\nconst styles: ComputedRef<Record<string, string>> = computed(() => ({\n  '--flip-x': props.flipX ? '-1' : '1',\n  '--flip-y': props.flipY ? '-1' : '1',\n}))\n\n// Update the path with the corresponding SVG data from @mdi/js.\nasync function updateIcon() {\n  path.value = await importIcon(props.icon)\n}\n\n// Update the icon when the icon prop changes.\nwatch(async () => props.icon, await updateIcon)\n\n// Update the icon when the component is initially mounted.\nawait updateIcon()\n</script>\n\n<style scoped>\nsvg {\n  transform: scaleX(var(--flip-x, 1)) scaleY(var(--flip-y, 1));\n}\n\npath {\n  fill: currentColor;\n}\n</style>\n"],"file":"_nuxt/BzOh5FaM.js"}