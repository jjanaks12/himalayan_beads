{"version":3,"file":"BoQgc55a.js","sources":["../../../../store/product.ts","../../../../lib/schema/product.ts","../../../../components/product/form.vue","../../../../pages/dashboard/product/index.vue"],"sourcesContent":["import { Prisma, type Product } from '@prisma/client'\nimport { defineStore } from 'pinia'\n\nconst fullProduct = Prisma.validator<Prisma.ProductDefaultArgs>()({\n  include: {\n    category: true,\n    prices: true,\n    images: true,\n    stock: true\n  }\n})\ntype FullProduct = Prisma.ProductGetPayload<typeof fullProduct>\n\nexport const useProductStore = defineStore('product', () => {\n  const productList = ref<FullProduct[]>([])\n\n  const fetchProduct = async () => {\n    const a = await $fetch<APIResponse<FullProduct[]>>('/api/product')\n    if (a.status == 'success')\n      productList.value = a.data\n  }\n\n  const saveProduct = (values: any) => new Promise((resolve, reject) => {\n    {\n      $fetch<APIResponse<Product>>('/api/product', {\n        method: 'POST',\n        body: values\n      })\n        .then((a) => {\n          if (a.status == 'success')\n            resolve(true)\n          else\n            reject(a.message)\n        })\n    }\n  })\n\n  return { fetchProduct, saveProduct, productList }\n})\n","import * as Yup from 'yup'\n\nexport const productSchema = Yup.object().shape({\n    name: Yup.string().required().label('Name'),\n    description: Yup.string().required().label('Description'),\n    category_id: Yup.string().required().label('Category'),\n})","<script setup lang=\"ts\">\n    import type { Product } from '@prisma/client'\n    import { Form, Field, ErrorMessage, type SubmissionContext } from 'vee-validate'\n\n    import { productSchema } from '~/lib/schema/product'\n    import { useProductStore } from '~/store/product';\n    import { useProductCategoryStore } from '~/store/productCategory'\n\n    interface ProductFormProps {\n        product?: Product | null\n    }\n    const props = defineProps<ProductFormProps>()\n    const emit = defineEmits(['update-form'])\n    const { fetchCategory } = useProductCategoryStore()\n    const { categoryList } = storeToRefs(useProductCategoryStore())\n    const { saveProduct } = useProductStore()\n\n    const form = ref()\n    const isLoading = ref(false)\n\n    const formSubmit = (values: any, { resetForm }: SubmissionContext) => {\n        isLoading.value = true\n\n        saveProduct(({ ...values }))\n            .then(() => {\n                emit('update-form')\n                resetForm()\n            })\n            .finally(() => {\n                isLoading.value = false\n            })\n    }\n\n    const initializeForm = () => {\n        form.value?.resetForm()\n\n        if (props.product) {\n            form.value?.setFieldValue('id', props.product.id)\n            form.value?.setFieldValue('name', props.product.name)\n            form.value?.setFieldValue('description', props.product.description || '')\n            form.value?.setFieldValue('category_id', props.product.category_id || '')\n        }\n    }\n\n    watch(props, () => {\n        initializeForm()\n    }, {\n        deep: true,\n        immediate: true\n    })\n\n    onMounted(() => {\n        if (categoryList.value.length == 0)\n            fetchCategory()\n    })\n</script>\n\n<template>\n    <Form :validation-schema=\"productSchema\" @submit=\"formSubmit\" ref=\"form\">\n        <div class=\"form__group\">\n            <label for=\"pf__name\">Name</label>\n            <Field type=\"text\" name=\"name\" id=\"pf__name\" />\n            <ErrorMessage name=\"name\" class=\"input--error\" />\n        </div>\n        <div class=\"form__group\">\n            <label for=\"pf__description\">Description</label>\n            <Field name=\"description\" v-slot=\"{ field }\">\n                <textarea v-bind=\"field\" id=\"pf__description\" />\n            </Field>\n            <ErrorMessage class=\"input--error\" name=\"description\" />\n        </div>\n        <div class=\"form__group\">\n            <label for=\"cf__category_id\">Category</label>\n            <Field name=\"category_id\" v-slot=\"{ field }\">\n                <select v-bind=\"field\" id=\"cf__category_id\">\n                    <option value=\"\">Select a parent</option>\n                    <template v-for=\"category in categoryList\">\n                        <option :value=\"category.id\">{{ category.name }}</option>\n                        <template v-if=\"category.predecessor.length > 0\">\n                            <option v-for=\"subCategory in category.predecessor\" :value=\"subCategory.id\">&nbsp;&nbsp; {{\n                                subCategory.name }}</option>\n                        </template>\n                    </template>\n                </select>\n            </Field>\n            <ErrorMessage class=\"input--error\" name=\"category_id\" />\n        </div>\n        <div class=\"text--right\">\n            <button type=\"submit\" :class=\"{ 'btn btn__primary': true, 'loading': isLoading }\">Save</button>\n        </div>\n    </Form>\n</template>","<script lang=\"ts\" setup>\n    import type { Product } from '@prisma/client'\n\n    import { useProductStore } from '@/store/product'\n    import { formatDate } from '~/lib/filter'\n\n    import ProductForm from '@/components/product/form.vue'\n    import Alert from '~/components/Alert.vue'\n\n    useHead({\n        title: 'Products :: Himalayan Beads'\n    })\n\n    definePageMeta({\n        layout: 'admin',\n        middleware: 'auth'\n    })\n\n    const { fetchProduct } = useProductStore()\n    const { productList } = storeToRefs(useProductStore())\n\n    const isDeleting = ref(false)\n    const showForm = ref(false)\n    const editProduct = ref<null | Product>(null)\n    const deletingProduct = ref<null | Product>(null)\n\n    const showDeleteAlert = computed(() => deletingProduct.value != null)\n\n    const deleteProduct = () => {\n        isDeleting.value = true\n\n        $fetch(`/api/category/${deletingProduct.value?.id}/`, {\n            method: 'DELETE'\n        })\n            .then(() => {\n                deletingProduct.value = null\n                fetchProduct()\n            })\n            .finally(() => {\n                isDeleting.value = false\n            })\n    }\n\n    watch(editProduct, () => {\n        if (editProduct.value)\n            showForm.value = true\n        else\n            showForm.value = false\n    })\n    onMounted(() => {\n        fetchProduct()\n    })\n</script>\n\n<template>\n    <section class=\"datatable__section\">\n        <header class=\"datatable__header\">\n            <div class=\"datatable__header__holder\">\n                <h1>Product</h1>\n            </div>\n            <div class=\"datatable__header__action\">\n                <a class=\"btn btn__primary\" href=\"#\" @click.prevent=\"showForm = true\">\n                    <span class=\"prepend-icon icon-add\"></span>\n                    Add Product\n                </a>\n            </div>\n        </header>\n        <div class=\"datatable__body\">\n            <table>\n                <thead>\n                    <tr>\n                        <th></th>\n                        <th class=\"text--left\">Name</th>\n                        <th>Created at</th>\n                        <th class=\"text--right\">Action</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr v-for=\"(product, index) in productList\" :key=\"product.id\">\n                        <td class=\"sn\">{{ index + 1 }}</td>\n                        <td>\n                            <div class=\"wrap\">\n                                <figure class=\"image\">\n                                    <img src=\"\" :alt=\"product.name\">\n                                </figure>\n                                <div class=\"holder\">\n                                    <NuxtLink :to=\"'/dashboard/product/' + product.id\" class=\"title\">{{ product.name }}\n                                    </NuxtLink>\n                                    <em class=\"subtitle\">{{ product.category?.name }}</em>\n                                </div>\n                            </div>\n                        </td>\n                        <td class=\"text--center\">{{ formatDate(product.createdAt) }}</td>\n                        <td class=\"text--right\">\n                            <a class=\"btn btn--xs btn__info\" href=\"#\" @click.prevent=\"editProduct = product\">\n                                <span class=\"prepend-icon icon-edit\"></span>\n                                Edit\n                            </a>\n                            <a class=\"btn btn--xs btn__danger\" href=\"#\" @click.prevent=\"deletingProduct = product\">\n                                <span class=\"prepend-icon icon-trash\"></span>\n                                Delete\n                            </a>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n        <Modal v-model:show=\"showForm\" @modal:close=\"editProduct = null\">\n            <ProductForm :product=\"editProduct || null\" @update-form=\"() => {\n                showForm = false\n\n                fetchProduct()\n            }\" />\n        </Modal>\n        <Alert title=\"Are you sure you want delete?\" v-model:show=\"showDeleteAlert\" v-model:loading=\"isDeleting\"\n            :onCancel=\"() => {\n                deletingProduct = null\n            }\" :onConfirm=\"deleteProduct\">\n            <p>Lorem ipsum dolor sit amet consectetur, adipisicing elit. Aliquid quo, explicabo necessitatibus\n                laboriosam a\n                voluptatem hic ratione eius excepturi doloremque quidem odit eaque blanditiis illo obcaecati. Dicta\n                adipisci\n                accusantium quidem.</p>\n        </Alert>\n    </section>\n</template>"],"names":["Prisma","useProductStore","defineStore","productList","ref","a","values","resolve","reject","productSchema","Yup.object","Yup.string","props","__props","emit","__emit","fetchCategory","useProductCategoryStore","categoryList","storeToRefs","saveProduct","form","isLoading","formSubmit","resetForm","initializeForm","_a","_b","_c","_d","_e","watch","onMounted","useHead","fetchProduct","isDeleting","showForm","editProduct","deletingProduct","showDeleteAlert","computed","deleteProduct"],"mappings":"4bAGoBA,EAAO,OAAA,UAAA,EAAuC,CAChE,QAAS,CACP,SAAU,GACV,OAAQ,GACR,OAAQ,GACR,MAAO,EACT,CACF,CAAC,EAGY,MAAAC,EAAkBC,EAAY,UAAW,IAAM,CACpD,MAAAC,EAAcC,EAAmB,CAAA,CAAE,EAuBlC,MAAA,CAAE,aArBY,SAAY,CACzB,MAAAC,EAAI,MAAM,OAAmC,cAAc,EAC7DA,EAAE,QAAU,YACdF,EAAY,MAAQE,EAAE,KAAA,EAkBH,YAfFC,GAAgB,IAAI,QAAQ,CAACC,EAASC,IAAW,CAElE,OAA6B,eAAgB,CAC3C,OAAQ,OACR,KAAMF,CAAA,CACP,EACE,KAAMD,GAAM,CACPA,EAAE,QAAU,UACdE,EAAQ,EAAI,EAEZC,EAAOH,EAAE,OAAO,CAAA,CACnB,CACL,CACD,EAEmC,YAAAF,EACtC,CAAC,ECpCYM,EAAgBC,EAAW,EAAE,MAAM,CAC5C,KAAMC,IAAa,SAAS,EAAE,MAAM,MAAM,EAC1C,YAAaA,IAAa,SAAS,EAAE,MAAM,aAAa,EACxD,YAAaA,IAAa,SAAS,EAAE,MAAM,UAAU,CACzD,CAAC,+MCKG,MAAMC,EAAQC,EACRC,EAAOC,EACP,CAAE,cAAAC,GAAkBC,IACpB,CAAE,aAAAC,CAAiB,EAAAC,EAAYF,EAAyB,CAAA,EACxD,CAAE,YAAAG,GAAgBnB,IAElBoB,EAAOjB,IACPkB,EAAYlB,EAAI,EAAK,EAErBmB,EAAa,CAACjB,EAAa,CAAE,UAAAkB,KAAmC,CAClEF,EAAU,MAAQ,GAElBF,EAAa,CAAE,GAAGd,EAAS,EACtB,KAAK,IAAM,CACRQ,EAAK,aAAa,EACRU,GAAA,CACb,EACA,QAAQ,IAAM,CACXF,EAAU,MAAQ,EAAA,CACrB,CAAA,EAGHG,EAAiB,IAAM,gBACzBC,EAAAL,EAAK,QAAL,MAAAK,EAAY,YAERd,EAAM,WACNe,EAAAN,EAAK,QAAL,MAAAM,EAAY,cAAc,KAAMf,EAAM,QAAQ,KAC9CgB,EAAAP,EAAK,QAAL,MAAAO,EAAY,cAAc,OAAQhB,EAAM,QAAQ,OAChDiB,EAAAR,EAAK,QAAL,MAAAQ,EAAY,cAAc,cAAejB,EAAM,QAAQ,aAAe,KACtEkB,EAAAT,EAAK,QAAL,MAAAS,EAAY,cAAc,cAAelB,EAAM,QAAQ,aAAe,IAC1E,EAGJ,OAAAmB,EAAMnB,EAAO,IAAM,CACAa,GAAA,EAChB,CACC,KAAM,GACN,UAAW,EAAA,CACd,EAEDO,EAAU,IAAM,CACRd,EAAa,MAAM,QAAU,GACfF,GAAA,CACrB,68CC7COiB,EAAA,CACJ,MAAO,6BAAA,CACV,EAOK,KAAA,CAAE,aAAAC,GAAiBjC,IACnB,CAAE,YAAAE,CAAgB,EAAAgB,EAAYlB,EAAiB,CAAA,EAE/CkC,EAAa/B,EAAI,EAAK,EACtBgC,EAAWhC,EAAI,EAAK,EACpBiC,EAAcjC,EAAoB,IAAI,EACtCkC,EAAkBlC,EAAoB,IAAI,EAE1CmC,EAAkBC,EAAS,IAAMF,EAAgB,OAAS,IAAI,EAE9DG,EAAgB,IAAM,OACxBN,EAAW,MAAQ,GAEnB,OAAO,kBAAiBT,EAAAY,EAAgB,QAAhB,YAAAZ,EAAuB,EAAE,IAAK,CAClD,OAAQ,QAAA,CACX,EACI,KAAK,IAAM,CACRY,EAAgB,MAAQ,KACXJ,GAAA,CAChB,EACA,QAAQ,IAAM,CACXC,EAAW,MAAQ,EAAA,CACtB,CAAA,EAGT,OAAAJ,EAAMM,EAAa,IAAM,CACjBA,EAAY,MACZD,EAAS,MAAQ,GAEjBA,EAAS,MAAQ,EAAA,CACxB,EACDJ,EAAU,IAAM,CACCE,GAAA,CAChB"}