// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Image {
  id   String  @id @default(cuid())
  name String
  url  String?

  category         Category?
  products         ImageOnProduct[]
  imageOnProductId String?
  users            User[]

  @@map("images")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  parent_id   String?
  image_id    String?   @unique
  description String?
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  image       Image?     @relation(fields: [image_id], references: [id])
  successor   Category?  @relation("parentCategory", fields: [parent_id], references: [id])
  predecessor Category[] @relation("parentCategory")
  products    Product[]

  @@map("categories")
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String?   @db.Text
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  category_id String

  category Category?        @relation(fields: [category_id], references: [id])
  images   ImageOnProduct[]
  stock    Stock?
  prices   PriceOnProduct[]

  @@map("products")
}

model Price {
  id        String  @id @default(cuid())
  amount    Float
  parent_id String?

  products PriceOnProduct[]

  @@map("prices")
}

model ImageOnProduct {
  id         String  @id @default(cuid())
  product_id String?
  image_id   String?
  featured   Boolean @default(false)

  products Product? @relation(fields: [product_id], references: [id])
  images   Image?   @relation(fields: [image_id], references: [id])

  @@map("image_on_product")
}

model PriceOnProduct {
  id         String @id @default(cuid())
  product_id String
  price_id   String

  price  Price   @relation(fields: [price_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  @@map("price_on_product")
}

model Stock {
  id         String  @id @default(cuid())
  quantity   Int
  product_id String  @unique
  product    Product @relation(fields: [product_id], references: [id])

  @@map("stocks")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  role_id       String
  image_id      String?
  emailVerified DateTime?
  deletedAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  Session       Session[]
  Authenticator Authenticator[]
  role          Role            @relation(fields: [role_id], references: [id])
  image         Image?          @relation(fields: [image_id], references: [id])

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user          User            @relation(fields: [userId], references: [id])
  Authenticator Authenticator[]

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Session   Session? @relation(fields: [sessionId], references: [id])
  sessionId String?

  @@id([userId, credentialID])
  @@map("authenticators")
}

model Role {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  publish     Boolean
  deletedAt   DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  permissions PermissionOnRole[]
  users       User[]
}

model Permission {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  roles PermissionOnRole[]
}

model PermissionOnRole {
  id            String @id @default(cuid())
  permission_id String
  role_id       String

  permission Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  role       Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)
}
